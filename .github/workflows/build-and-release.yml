name: 🚀 Build and Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-release:
    outputs:
      releaseUploadUrl: ${{ steps.create_release.outputs.releaseUploadUrl }}
    runs-on: ${{ matrix.os }}

    permissions:
      contents: write
      packages: write
      actions: write
      pull-requests: write

    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        include:
          - os: windows-latest
            rust: stable
          - os: ubuntu-latest
            rust: stable
          - os: macos-latest
            rust: stable

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Install GitVersion
        uses: gittools/actions/gitversion/setup@v3.0.0
        with:
          versionSpec: "5.x"

      - name: 🔄 Determine Version
        id: version_step
        uses: gittools/actions/gitversion/execute@v3.0.0
        with:
          useConfigFile: true,
          configFilePath: GitVersion.yml

      - name: 🏪 Cache Node modules
        id: cache-node-modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            "**/node_modules"
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: 🛠️ Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 🔨 Install Dependencies
        run: npm ci
        if: steps.cache-node-modules.outputs.cache-hit != 'true'

      - name: 🏗️ Build App
        run: npm run build

      - name: ✅ Run Unit Tests
        run: npm run test

      - name: 🧪 Install Cypress
        run: npm run cy:install

      - name: ✅ Run Cypress Tests
        run: npm run test:e2e:ci

      - name: 📦 Install dependencies (ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

      - name: 📰 Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            $HOME/.cargo/bin/
            $HOME/.cargo/registry/index/
            $HOME/.cargo/registry/cache/
            $HOME/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: 🚀 Release App
        uses: tauri-apps/tauri-action@v0
        if: github.ref == 'refs/heads/main'
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: 'v${{ steps.version_step.outputs.semVer }}'
          releaseName: 'v${{ steps.version_step.outputs.semVer }}'

      - name: 🗃️ Archive dist folder
        run: tar -czvf dist.tar.gz dist
        if: matrix.os == 'ubuntu-latest' && github.ref == 'refs/heads/main'

      - name: ☁️ Upload Release Asset
        uses: actions/upload-release-asset@v1
        if: matrix.os == 'ubuntu-latest' && github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.releaseUploadUrl }}
          asset_path: ./dist.tar.gz
          asset_name: web-app.tar.gz
          asset_content_type: application/gzip
